import BgAnimation from '../components/BackgrooundAnimation/BackgroundAnimation';
import Hero from '../components/Hero/Hero';
import Projects from '../components/Projects/Projects';
import Technologies from '../components/Technologies/Technologies';
import Timeline from '../components/TimeLine/TimeLine';

import { Layout } from '../layout/Layout';
import Schema from '../models/Schema';
import { Section } from '../styles/GlobalComponents';
import dbConnect from '../utils/mongo';

const Home = ({allData}) => {
  return (
    <Layout>
      <Section id="home"  grid main>
        <Hero data={allData[0].Hero}/>
        <BgAnimation />
      </Section>
      <Technologies data={allData[0].Skills}/>
      <Projects tags={allData[0].Skills.coding.icons} data={allData[0].projects}/>
      <Timeline data={allData[0].aboutme}/>
    </Layout>
  );
};// This gets called on every request
export async function getStaticProps() {
  // Fetch data from external API
  await dbConnect()
  const allData = await Schema.find()

  const exists = allData !== null && allData !== undefined && allData.length > 0;

  if (exists === true) {
    return {
      props: {
        allData:JSON.parse(JSON.stringify(allData)),
      },
      // Next.js will attempt to re-generate the page:
      // - When a request comes in
      // - At most once every 10 seconds
      //revalidate: 100, // In seconds
    }

  } else {
    return {
      props: {
        allData:{},
      },
      // Next.js will attempt to re-generate the page:
      // - When a request comes in
      // - At most once every 10 seconds
      //revalidate: 100, // In seconds
    }
  }
// This value is considered fresh for ten seconds (s-maxage=10).
// If a request is repeated within the next 10 seconds, the previously
// cached value will still be fresh. If the request is repeated before 59 seconds,
// the cached value will be stale but still render (stale-while-revalidate=59).
//
// In the background, a revalidation request will be made to populate the cache
// with a fresh value. If you refresh the page, you will see the new value.
/*res.setHeader(
  'Cache-Control',
  'public, s-maxage=10, stale-while-revalidate=59'
)*/
//To ensure consistency across all pods, you can disable in-memory caching. This will inform the Next.js server to only leverage assets generated by ISR in the file system.


  // Pass data to the page via props

}

export default Home;
